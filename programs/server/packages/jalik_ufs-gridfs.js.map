{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-gridfs/ufs-gridfs.js"],"names":["_","module","import","v","check","Meteor","UploadFS","store","GridFS","options","extend","chunkSize","collectionName","TypeError","Store","isServer","Npm","require","mongo","Package","MongoInternals","NpmModule","db","defaultRemoteCollectionDriver","mongoStore","delete","fileId","callback","err","console","error","remove","filename","root","getReadStream","file","createReadStream","_id","range","startPos","start","endPos","end","getWriteStream","writeStream","createWriteStream","mode","content_type","type","on","emit"],"mappings":"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","file":"/packages/jalik_ufs-gridfs.js","sourcesContent":["import {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n\n/**\n * GridFS store\n * @param options\n * @constructor\n */\nUploadFS.store.GridFS = function (options) {\n    // Default options\n    options = _.extend({\n        chunkSize: 1024 * 255,\n        collectionName: 'uploadfs'\n    }, options);\n\n    // Check options\n    if (typeof options.chunkSize !== 'number') {\n        throw new TypeError('chunkSize is not a number');\n    }\n    if (typeof options.collectionName !== 'string') {\n        throw new TypeError('collectionName is not a string');\n    }\n\n    // Create the store\n    let store = new UploadFS.Store(options);\n\n    store.chunkSize = options.chunkSize;\n    store.collectionName = options.collectionName;\n\n    if (Meteor.isServer) {\n        const GridFS = Npm.require('gridfs-stream');\n        let mongo = Package.mongo.MongoInternals.NpmModule;\n        let db = Package.mongo.MongoInternals.defaultRemoteCollectionDriver().mongo.db;\n        let mongoStore = new GridFS(db, mongo);\n\n        /**\n         * Removes the file\n         * @param fileId\n         * @param callback\n         */\n        store.delete = function (fileId, callback) {\n            if (typeof callback !== 'function') {\n                callback = function (err) {\n                    if (err) {\n                        console.error(err);\n                    }\n                }\n            }\n            return mongoStore.remove({\n                filename: fileId,\n                root: options.collectionName\n            }, callback);\n        };\n\n        /**\n         * Returns the file read stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        store.getReadStream = function (fileId, file, options) {\n            options = _.extend({}, options);\n            return mongoStore.createReadStream({\n                _id: fileId,\n                root: store.collectionName,\n                range: {\n                    startPos: options.start,\n                    endPos: options.end\n                }\n            });\n        };\n\n        /**\n         * Returns the file write stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        store.getWriteStream = function (fileId, file, options) {\n            let writeStream = mongoStore.createWriteStream({\n                _id: fileId,\n                filename: fileId,\n                mode: 'w',\n                chunkSize: store.chunkSize,\n                root: store.collectionName,\n                content_type: file.type\n            });\n            writeStream.on('close', function () {\n                writeStream.emit('finish');\n            });\n            return writeStream;\n        };\n    }\n\n    return store;\n};\n"]}