{"version":3,"sources":["meteor://ðŸ’»app/packages/jalik:ufs-local/ufs-local.js"],"names":["_","module","import","v","check","Meteor","UploadFS","store","Local","options","extend","mode","path","writeMode","TypeError","isServer","fs","Npm","require","stat","err","mkdirp","console","error","message","info","chmod","self","Store","getFilePath","fileId","file","getCollection","findOne","fields","extension","getPath","delete","callback","bindEnvironment","isFile","unlink","remove","call","getReadStream","createReadStream","flags","encoding","autoClose","start","end","getWriteStream","createWriteStream"],"mappings":"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","file":"/packages/jalik_ufs-local.js","sourcesContent":["import {_} from 'meteor/underscore';\nimport {check} from 'meteor/check';\nimport {Meteor} from 'meteor/meteor';\n\n/**\n * File system store\n * @param options\n * @constructor\n */\nUploadFS.store.Local = function (options) {\n    // Default options\n    options = _.extend({\n        mode: '0744',\n        path: 'ufs/uploads',\n        writeMode: '0744'\n    }, options);\n\n    // Check options\n    if (typeof options.mode !== 'string') {\n        throw new TypeError('mode is not a string');\n    }\n    if (typeof options.path !== 'string') {\n        throw new TypeError('path is not a string');\n    }\n    if (typeof options.writeMode !== 'string') {\n        throw new TypeError('writeMode is not a string');\n    }\n\n    // Private attributes\n    let mode = options.mode;\n    let path = options.path;\n    let writeMode = options.writeMode;\n\n    if (Meteor.isServer) {\n        const fs = Npm.require('fs');\n\n        fs.stat(path, function (err) {\n            if (err) {\n                const mkdirp = Npm.require('mkdirp');\n\n                // Create the directory\n                mkdirp(path, {mode: mode}, function (err) {\n                    if (err) {\n                        console.error('ufs: cannot create store at ' + path + ' (' + err.message + ')');\n                    } else {\n                        console.info('ufs: store created at ' + path);\n                    }\n                });\n            } else {\n                // Set directory permissions\n                fs.chmod(path, mode, function (err) {\n                    err && console.error('ufs: cannot set store permissions ' + mode + ' (' + err.message + ')');\n                });\n            }\n        });\n    }\n\n    // Create the store\n    let self = new UploadFS.Store(options);\n\n    /**\n     * Returns the file path\n     * @param fileId\n     * @param file\n     * @return {string}\n     */\n    self.getFilePath = function (fileId, file) {\n        file = file || self.getCollection().findOne(fileId, {fields: {extension: 1}});\n        return file && self.getPath(fileId + (file.extension ? '.' + file.extension : ''));\n    };\n\n    /**\n     * Returns the path or sub path\n     * @param file\n     * @return {string}\n     */\n    self.getPath = function (file) {\n        return path + (file ? '/' + file : '');\n    };\n\n\n    if (Meteor.isServer) {\n        /**\n         * Removes the file\n         * @param fileId\n         * @param callback\n         */\n        self.delete = function (fileId, callback) {\n            let path = self.getFilePath(fileId);\n\n            if (typeof callback !== 'function') {\n                callback = function (err) {\n                    err && console.error('ufs: cannot delete file \"' + fileId + '\" at ' + path + ' (' + err.message + ')');\n                }\n            }\n            const fs = Npm.require('fs');\n            fs.stat(path, Meteor.bindEnvironment(function (err, stat) {\n                if (!err && stat && stat.isFile()) {\n                    fs.unlink(path, Meteor.bindEnvironment(function () {\n                        self.getCollection().remove(fileId);\n                        callback.call(this);\n                    }));\n                }\n            }));\n        };\n\n        /**\n         * Returns the file read stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        self.getReadStream = function (fileId, file, options) {\n            const fs = Npm.require('fs');\n            options = _.extend({}, options);\n            return fs.createReadStream(self.getFilePath(fileId, file), {\n                flags: 'r',\n                encoding: null,\n                autoClose: true,\n                start: options.start,\n                end: options.end\n            });\n        };\n\n        /**\n         * Returns the file write stream\n         * @param fileId\n         * @param file\n         * @param options\n         * @return {*}\n         */\n        self.getWriteStream = function (fileId, file, options) {\n            const fs = Npm.require('fs');\n            options = _.extend({}, options);\n            return fs.createWriteStream(self.getFilePath(fileId, file), {\n                flags: 'a',\n                encoding: null,\n                mode: writeMode,\n                start: options.start\n            });\n        };\n    }\n\n    return self;\n};\n"]}